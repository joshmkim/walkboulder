<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Settings</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
  <style>

    /* Body padding to account for fixed navbar */
    body {
      padding-top: 0px;
      background-image: url('https://images.unsplash.com/photo-1691777065847-4c9266ee59fd?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D');
      background-size: cover;
      background-position: center;
      background-attachment: fixed;
      background-color: #f0f2f5;
      font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
      color: #1a1a1a;
      min-height: 100vh;
    }

    /* Settings page specific styles */
    .settings-card {
      background-color: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      max-width: 600px;
      margin: 4rem auto;
      padding: 3rem;
      border-radius: 16px;
      box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .settings-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    }

    .avatar {
      width: 120px;
      height: 120px;
      object-fit: cover;
      margin: 0 auto 1.5rem;
      border-radius: 50%;
      display: block;
      border: 4px solid #fff;
      box-shadow: 0 0 0 2px #e5e7eb;
      transition: transform 0.3s ease;
    }

    .avatar:hover {
      transform: scale(1.05);
    }

    .edit-avatar-wrapper {
      text-align: center;
      margin-top: 1rem;
      margin-bottom: 2rem;
    }

    .custom-btn {
      display: inline-flex;
      align-items: center;
      padding: 0.75rem 1.5rem;
      font-size: 1rem;
      font-weight: 500;
      background-color: #3b82f6;
      color: white;
      border: none;
      border-radius: 9999px;
      text-decoration: none;
      cursor: pointer;
      transition: all 0.2s ease;
      box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
    }

    .custom-btn:hover {
      background-color: #2563eb;
      transform: translateY(-1px);
    }

    .user-name {
      font-size: 1.875rem;
      font-weight: 700;
      margin: 0.5rem 0 0.25rem;
      color: #111827;
      letter-spacing: -0.025em;
    }

    .user-plan {
      font-size: 1rem;
      color: #6b7280;
      margin-bottom: 2rem;
    }

    label {
      font-weight: 500;
      color: #374151;
      margin-bottom: 0.5rem;
      display: block;
    }

    .form-control {
      width: 100%;
      padding: 0.75rem 1rem;
      border-radius: 0.5rem;
      border: 2px solid #e5e7eb;
      transition: all 0.2s ease;
      font-size: 1rem;
      color: #1f2937;
    }

    .form-control:focus {
      border-color: #3b82f6;
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
      outline: none;
    }

    .form-group {
      margin-bottom: 1.5rem;
    }

    .save-btn {
      background-color: #e2d4f7;
      color: #fff;
      border: none;
      width: 100%;
      padding: 0.75rem 1.5rem;
      border-radius: 9999px;
      font-weight: 500;
      font-size: 1rem;
      cursor: not-allowed;
      transition: all 0.2s ease;
      margin-top: 2rem;
    }

    .save-btn.enabled {
      background-color: #3b82f6;
      cursor: pointer;
    }

    .save-btn.enabled:hover {
      background-color: #2563eb;
      transform: translateY(-1px);
    }

    @media (max-width: 640px) {
      .settings-card {
        margin: 2rem 1rem;
        padding: 2rem;
      }
    }

    /* Modal styles */
    .modal-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1040;
      justify-content: center;
      align-items: center;
    }

    .modal-content {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      max-width: 400px;
      width: 90%;
      text-align: center;
    }

    .modal-buttons {
      display: flex;
      justify-content: center;
      gap: 10px;
      margin-top: 20px;
    }

    .modal-button {
      padding: 8px 16px;
      border-radius: 4px;
      cursor: pointer;
      border: none;
    }

    .confirm-button {
      background-color: #dc3545;
      color: white;
    }

    .cancel-button {
      background-color: #6c757d;
      color: white;
    }
  </style>
</head>
<body>
 
  <!-- Logout Confirmation Modal -->
  <div class="modal-overlay" id="logoutModal">
    <div class="modal-content">
      <h3>Are you sure you want to logout?</h3>
      <div class="modal-buttons">
        <button class="modal-button confirm-button" id="confirmLogout">Yes, Logout</button>
        <button class="modal-button cancel-button" id="cancelLogout">Cancel</button>
      </div>
    </div>
  </div>

  <!-- Settings Content -->
  <div class="container">
    {{> message message=message error=error }}
    <div class="settings-card">
      <!-- Profile Info -->
      <div class="text-center">
        <img src="{{userData.avatar}}" alt="Profile picture" class="avatar" id="avatarPreview">

        <!-- Edit Avatar Form -->
        <div class="edit-avatar-wrapper">
          <form action="/upload-avatar" method="POST" enctype="multipart/form-data" id="avatarForm">
            <input type="file" name="avatar" accept="image/*" style="display: none;" id="avatarInput">
            <button type="button" class="custom-btn" onclick="document.getElementById('avatarInput').click();">Edit Avatar</button>
          </form>
        </div>

        <p class="user-name">{{userData.username}}</p>
      </div>

      <!-- Settings Form -->
      <form method="POST" action="/settings">
        <div class="form-group">
          <label for="username">Username</label>
          <input type="text" class="form-control" name="username" id="username" value="{{userData.username}}">
        </div>
        <div class="form-group">
          <label for="firstName">First Name</label>
          <input type="text" class="form-control" name="firstname" id="firstName" value="{{userData.firstname}}">
        </div>
        <div class="form-group">
          <label for="lastName">Last Name</label>
          <input type="text" class="form-control" name="lastname" id="lastName" value="{{userData.lastname}}">
        </div>
        <div class="form-group">
          <label for="email">Email</label>
          <input type="email" class="form-control" name="email" id="email" value="{{userData.email}}">
        </div>
        <div class="form-group">
          <label for="currentPassword">Current Password</label>
          <input type="password" class="form-control" id="currentPassword" name="currentPassword">
        </div>
        <div class="form-group">
          <label for="newPassword">New Password</label>
          <input type="password" class="form-control" id="newPassword" name="newPassword">
        </div>
        <div class="form-group">
          <label for="confirmPassword">Confirm New Password</label>
          <input type="password" class="form-control" id="confirmPassword" name="confirmPassword">
        </div>
        <button type="submit" class="save-btn" disabled>Save Changes</button>
      </form>
    </div>
  </div>

  <!-- Script for Avatar Upload & Preview -->
  <script>
    const avatarInput = document.getElementById('avatarInput');
    const avatarForm = document.getElementById('avatarForm');
    const avatarPreview = document.getElementById('avatarPreview');

    avatarInput.addEventListener('change', function() {
      if (avatarInput.files && avatarInput.files[0]) {
        const reader = new FileReader();
        reader.onload = function(e) {
          avatarPreview.src = e.target.result;
        };
        reader.readAsDataURL(avatarInput.files[0]);

        // Optional small delay for preview effect
        avatarForm.submit();
      }
    });
  </script>

  <script>
    const form = document.querySelector('form[action="/settings"]');
    const inputs = form.querySelectorAll('input');
    const saveBtn = form.querySelector('.save-btn');

    // Store original values
    const originalValues = {};
    inputs.forEach(input => {
      originalValues[input.name] = input.value;
    });

    function checkForChanges() {
      let changed = false;
      inputs.forEach(input => {
        if (input.value !== originalValues[input.name]) {
          changed = true;
        }
      });

      if (changed) {
        saveBtn.classList.add('enabled');
        saveBtn.disabled = false;
      } else {
        saveBtn.classList.remove('enabled');
        saveBtn.disabled = true;
      }
    }

    inputs.forEach(input => {
      input.addEventListener('input', checkForChanges);
    });

    // Disable button on page load
    window.addEventListener('DOMContentLoaded', () => {
      saveBtn.disabled = true;
    });
  </script>

  <!-- Logout Modal Script -->
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const logoutLink = document.querySelector('.logout-link');
      const logoutModal = document.getElementById('logoutModal');
      const confirmLogout = document.getElementById('confirmLogout');
      const cancelLogout = document.getElementById('cancelLogout');

      logoutLink?.addEventListener('click', function(e) {
        e.preventDefault();
        logoutModal.style.display = 'flex';
      });

      confirmLogout?.addEventListener('click', function() {
        window.location.href = '/logout';
      });

      cancelLogout?.addEventListener('click', function() {
        logoutModal.style.display = 'none';
      });

      logoutModal?.addEventListener('click', function(e) {
        if (e.target === logoutModal) {
          logoutModal.style.display = 'none';
        }
      });
    });
  </script>
</body>
</html>