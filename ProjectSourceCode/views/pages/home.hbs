<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Walk Boulder</title>
  <link rel="stylesheet" href="/styles.css">
  <style>
    .search-container {
      position: relative;
      width: 100%;
    }

    .search-input {
      width: 100%;
      padding: 1rem 1.5rem 1rem 3.5rem;
      font-size: 1.125rem;
      border: none;
      border-radius: 9999px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: border-radius 0.2s ease;
    }

    .search-input.dropdown-open {
      border-radius: 1.5rem 1.5rem 0 0;
    }

    .search-dropdown {
      position: absolute;
      top: calc(100% - 1px);
      left: 0;
      right: 0;
      z-index: 10;
      background: white;
      border-radius: 0 0 1.5rem 1.5rem;
      box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      list-style-type: none;
      padding: 0.5rem;
      margin: 0;
      max-height: 350px;
      overflow-y: auto;
      opacity: 0;
      transform: translateY(-10px);
      visibility: hidden;
      transition: opacity 0.2s ease, transform 0.2s ease, visibility 0.2s;
    }

    .search-dropdown.visible {
      opacity: 1;
      transform: translateY(0);
      visibility: visible;
    }

    .search-dropdown-item {
      padding: 0.75rem;
      cursor: pointer;
      border-radius: 0.75rem;
      transition: all 0.2s;
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .search-dropdown-item:hover,
    .search-dropdown-item.active {
      background-color: rgba(16, 185, 129, 0.1);
    }

    .search-dropdown-item-empty {
      padding: 1.5rem;
      text-align: center;
      color: #6b7280;
      font-style: italic;
    }

    .trail-thumbnail {
      width: 48px;
      height: 48px;
      border-radius: 0.5rem;
      object-fit: cover;
      flex-shrink: 0;
    }

    .trail-info {
      display: flex;
      gap: 1rem;
      margin-top: 0.25rem;
      font-size: 0.875rem;
      color: #666;
    }

    .trail-info span {
      display: flex;
      align-items: center;
      gap: 0.25rem;
    }

    .trail-name {
      font-weight: 600;
      color: #333;
      margin-bottom: 0.25rem;
    }

    .trail-details {
      flex-grow: 1;
    }

    .trail-location {
      color: #10b981;
      margin-left: auto;
    }

    .search-dropdown::-webkit-scrollbar {
      width: 8px;
    }

    .search-dropdown::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 8px;
    }

    .search-dropdown::-webkit-scrollbar-thumb {
      background: #d1d5db;
      border-radius: 8px;
    }

    .search-dropdown::-webkit-scrollbar-thumb:hover {
      background: #9ca3af;
    }

    @media (max-width: 640px) {
      .search-dropdown {
        max-height: 300px;
      }
      
      .search-dropdown-item {
        padding: 0.6rem;
      }
      
      .trail-info {
        gap: 0.75rem;
        font-size: 0.75rem;
      }

      .trail-thumbnail {
        width: 40px;
        height: 40px;
      }
    }
  </style>
</head>
<body>
  <div class="min-h-screen">
    <!-- Hero Section -->
    <div class="hero-section" style="background: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url('https://images.unsplash.com/photo-1551632811-561732d1e306?auto=format&fit=crop&q=80&w=2070');
      background-size: cover; background-position: center; min-height: 100vh; display: flex; flex-direction: column; align-items: center; justify-content: center; text-align: center; padding: 0 1rem; margin-top: -56px; padding-top: 56px;">
      <h1 style="color: white; font-size: 4rem; font-weight: bold; margin-bottom: 2rem; text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">Walk Boulder</h1>
      <div style="width: 100%; max-width: 600px; margin-bottom: 2rem; position: relative;">
        <div class="search-container">
          <div style="position: relative; display: flex; align-items: center;">
            <svg style="position: absolute; left: 1.5rem; width: 20px; height: 20px; color: #666;" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
              <circle cx="11" cy="11" r="8"></circle>
              <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
            </svg>
            <input type="text" id="searchInput" class="search-input" placeholder="Search by city, park, or trail name">
          </div>
          <ul class="search-dropdown" id="searchDropdown"></ul>
        </div>
      </div>
      <a href="maps" style="color: white; text-decoration: none; font-weight: 500; transition: opacity 0.2s;">Explore nearby trails</a>
    </div>

    <!-- Popular Trails Section -->
    <div style="padding: 4rem 0; background: white;">
      <div style="max-width: 1200px; margin: 0 auto; padding: 0 20px;">
        <h2 style="font-size: 2rem; font-weight: bold; margin-bottom: 2rem; color: #333;">Explore Trails Near You</h2>
        <div id="trails-container" style="display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 2rem;"></div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', async () => {
      let trails = [];
      let activeIndex = -1;
      const searchInput = document.getElementById('searchInput');

      // Load trails data
      try {
        const response = await fetch('/api/trails');
        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
        trails = await response.json();

        const container = document.getElementById('trails-container');
        if (!trails || trails.length === 0) {
          container.innerHTML = '<p>No trails found. Check back later!</p>';
          return;
        }

        // Render trail cards
        container.innerHTML = trails.map(trail => `
          <div class="trail-card" style="background: white; border-radius: 0.75rem; overflow: hidden; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); transition: transform 0.2s;">
            <div style="position: relative;">
              <a href="/trail/${trail.trail_id}" style="display: block; height: 200px;">
                <img src="${trail.image_url}" alt="${trail.name}" style="width: 100%; height: 100%; object-fit: cover;">
              </a>
              <button class="bookmark-btn" data-trail-id="${trail.trail_id}" style="position: absolute; top: 1rem; right: 1rem; background: white; border: none; border-radius: 9999px; width: 2.5rem; height: 2.5rem; display: flex; align-items: center; justify-content: center; cursor: pointer; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);">
                <svg class="bookmark-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="${trail.is_saved ? 'currentColor' : 'none'}" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                </svg>
              </button>
            </div>
            <div style="padding: 1.25rem;">
              <a href="/trail/${trail.trail_id}" style="text-decoration: none; color: inherit;">
                <h3 style="font-size: 1.25rem; font-weight: 600; margin-bottom: 0.5rem; color: #333;">${trail.name}</h3>
                <p style="color: #666; font-size: 0.875rem;">${trail.distance} mi &nbsp;&nbsp;&nbsp;  ${trail.average_rating}â˜…</p>
              </a>
            </div>
          </div>
        `).join('');

        // Initialize bookmark buttons
        document.querySelectorAll('.bookmark-btn').forEach(btn => {
          btn.addEventListener('click', async function(e) {
            e.preventDefault();
            e.stopPropagation();
            const trailId = this.getAttribute('data-trail-id');
            const icon = this.querySelector('svg');
            
            try {
              // Check if user is authenticated
              const authResponse = await fetch('/api/check-auth');
              const { isAuthenticated } = await authResponse.json();
              
              if (!isAuthenticated) {
                window.location.href = '/login?returnTo=' + encodeURIComponent(window.location.pathname);
                return;
              }
              
              // Toggle bookmark
              const toggleResponse = await fetch('/api/toggle-save-trail', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({ trailId })
              });
              
              const { isSaved } = await toggleResponse.json();
              
              // Update icon
              if (isSaved) {
                icon.setAttribute('fill', '#3b82f6');
              } else {
                icon.setAttribute('fill', 'none');
              }
              
            } catch (error) {
              console.error('Error toggling bookmark:', error);
            }
          });
        });

      } catch (error) {
        console.error("Error loading trails:", error);
        document.getElementById('trails-container').innerHTML = `
          <div style="grid-column: 1/-1; text-align: center; padding: 2rem;">
            <p style="color: #dc2626;">Failed to load trails. Please try again later.</p>
            <p>Error: ${error.message}</p>
          </div>
        `;
      }

      // Search functionality
      const dropdown = document.getElementById('searchDropdown');

      const updateDropdown = (matches) => {
        dropdown.innerHTML = '';
        searchInput.classList.toggle('dropdown-open', matches.length > 0);
        
        if (matches.length === 0) {
          const noResults = document.createElement('li');
          noResults.className = 'search-dropdown-item-empty';
          noResults.textContent = 'No trails found';
          dropdown.appendChild(noResults);
        } else {
          matches.forEach((trail, index) => {
            const item = document.createElement('li');
            item.className = `search-dropdown-item ${index === activeIndex ? 'active' : ''}`;
            item.innerHTML = `
              <img src="${trail.image_url}" alt="${trail.name}" class="trail-thumbnail">
              <div class="trail-details">
                <div class="trail-name">${trail.name}</div>
                <div class="trail-info">
                  <span>${trail.distance} mi</span>
                  <span>${trail.average_rating}â˜…</span>
                </div>
              </div>
              <div class="trail-location">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                  <path d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"></path>
                  <circle cx="12" cy="10" r="3"></circle>
                </svg>
              </div>
            `;
            
            item.addEventListener('click', () => {
              window.location.href = `/trail/${trail.trail_id}`;
            });
            
            item.addEventListener('mouseenter', () => {
              activeIndex = index;
              updateDropdown(matches);
            });
            
            dropdown.appendChild(item);
          });
        }

        dropdown.classList.toggle('visible', matches.length > 0);
      };

      searchInput.addEventListener('input', () => {
        const query = searchInput.value.toLowerCase().trim();
        
        if (query.length === 0) {
          dropdown.classList.remove('visible');
          searchInput.classList.remove('dropdown-open');
          return;
        }

        const matches = trails.filter(trail => 
          trail.name.toLowerCase().includes(query)
        ).slice(0, 5);

        activeIndex = -1;
        updateDropdown(matches);
      });

      // Keyboard navigation
      searchInput.addEventListener('keydown', (e) => {
        const matches = trails.filter(trail => 
          trail.name.toLowerCase().includes(searchInput.value.toLowerCase().trim())
        ).slice(0, 5);

        if (e.key === 'ArrowDown') {
          e.preventDefault();
          activeIndex = Math.min(activeIndex + 1, matches.length - 1);
          updateDropdown(matches);
        } else if (e.key === 'ArrowUp') {
          e.preventDefault();
          activeIndex = Math.max(activeIndex - 1, 0);
          updateDropdown(matches);
        } else if (e.key === 'Enter' && activeIndex >= 0) {
          e.preventDefault();
          window.location.href = `/trail/${matches[activeIndex].trail_id}`;
        } else if (e.key === 'Escape') {
          dropdown.classList.remove('visible');
          searchInput.classList.remove('dropdown-open');
        }
      });

      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!e.target.closest('.search-container')) {
          dropdown.classList.remove('visible');
          searchInput.classList.remove('dropdown-open');
        }
      });
    });
  </script>
</body>
</html>